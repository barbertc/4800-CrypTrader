{"message":"can't find crate for `serde_json`","code":{"code":"E0463","explanation":"A plugin/crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\n#![feature(plugin)]\n#![plugin(cookie_monster)] // error: can't find crate for `cookie_monster`\nextern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc example). Plugins are crates as\nwell, and you link to them the same way.\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":323,"byte_end":347,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"extern crate serde_json;","highlight_start":1,"highlight_end":25}],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m: can't find crate for `serde_json`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mextern crate serde_json;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't find crate\u001b[0m\n\n"}
{"message":"can't find crate for `serde_derive`","code":{"code":"E0463","explanation":"A plugin/crate was declared but cannot be found.\n\nErroneous code example:\n\n```compile_fail,E0463\n#![feature(plugin)]\n#![plugin(cookie_monster)] // error: can't find crate for `cookie_monster`\nextern crate cake_is_a_lie; // error: can't find crate for `cake_is_a_lie`\n```\n\nYou need to link your code to the relevant crate in order to be able to use it\n(through Cargo or the `-L` option of rustc example). Plugins are crates as\nwell, and you link to them the same way.\n\n## Common causes\n\n- The crate is not present at all. If using Cargo, add it to `[dependencies]`\n  in Cargo.toml.\n- The crate is present, but under a different name. If using Cargo, look for\n  `package = ` under `[dependencies]` in Cargo.toml.\n\n## Common causes for missing `std` or `core`\n\n- You are cross-compiling for a target which doesn't have `std` prepackaged.\n  Consider one of the following:\n  + Adding a pre-compiled version of std with `rustup target add`\n  + Building std from source with `cargo build -Z build-std`\n  + Using `#![no_std]` at the crate root, so you won't need `std` in the first\n    place.\n- You are developing the compiler itself and haven't built libstd from source.\n  You can usually build it with `x.py build library/std`. More information\n  about x.py is available in the [rustc-dev-guide].\n\n[rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html#building-the-compiler\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":361,"byte_end":387,"line_start":11,"line_end":11,"column_start":14,"column_end":40,"is_primary":true,"text":[{"text":"#[macro_use] extern crate serde_derive;","highlight_start":14,"highlight_end":40}],"label":"can't find crate","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0463]\u001b[0m\u001b[0m\u001b[1m: can't find crate for `serde_derive`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:11:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[macro_use] extern crate serde_derive;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcan't find crate\u001b[0m\n\n"}
{"message":"unused imports: `Command`, `Stdio`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":19,"byte_end":26,"line_start":1,"line_end":1,"column_start":20,"column_end":27,"is_primary":true,"text":[{"text":"use std::process::{Command, Stdio};","highlight_start":20,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":28,"byte_end":33,"line_start":1,"line_end":1,"column_start":29,"column_end":34,"is_primary":true,"text":[{"text":"use std::process::{Command, Stdio};","highlight_start":29,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":35,"line_start":1,"line_end":1,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"use std::process::{Command, Stdio};","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Command`, `Stdio`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::process::{Command, Stdio};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::fs`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":75,"byte_end":82,"line_start":4,"line_end":4,"column_start":5,"column_end":12,"is_primary":true,"text":[{"text":"use std::fs;","highlight_start":5,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":71,"byte_end":83,"line_start":4,"line_end":4,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"use std::fs;","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fs`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::fs;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `BsType`, `KrakenCredentials`, `KrakenRestAPI`, `KrakenRestConfig`, `LimitOrder`, `MarketOrder`, `OrderFlag`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":99,"byte_end":105,"line_start":5,"line_end":5,"column_start":16,"column_end":22,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":16,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":107,"byte_end":124,"line_start":5,"line_end":5,"column_start":24,"column_end":41,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":24,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":126,"byte_end":139,"line_start":5,"line_end":5,"column_start":43,"column_end":56,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":43,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":141,"byte_end":157,"line_start":5,"line_end":5,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":58,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":159,"byte_end":169,"line_start":5,"line_end":5,"column_start":76,"column_end":86,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":76,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":171,"byte_end":182,"line_start":5,"line_end":5,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":184,"byte_end":193,"line_start":5,"line_end":5,"column_start":101,"column_end":110,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":101,"highlight_end":110}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":84,"byte_end":195,"line_start":5,"line_end":5,"column_start":1,"column_end":112,"is_primary":true,"text":[{"text":"use krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};","highlight_start":1,"highlight_end":112}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `BsType`, `KrakenCredentials`, `KrakenRestAPI`, `KrakenRestConfig`, `LimitOrder`, `MarketOrder`, `OrderFlag`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:5:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse krakenrs::{BsType, KrakenCredentials, KrakenRestAPI, KrakenRestConfig, LimitOrder, MarketOrder, OrderFlag};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `log::Level`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":200,"byte_end":210,"line_start":6,"line_end":6,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"use log::Level;","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":196,"byte_end":211,"line_start":6,"line_end":6,"column_start":1,"column_end":16,"is_primary":true,"text":[{"text":"use log::Level;","highlight_start":1,"highlight_end":16}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `log::Level`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse log::Level;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `serde::Serialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":216,"byte_end":232,"line_start":7,"line_end":7,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":212,"byte_end":233,"line_start":7,"line_end":7,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"use serde::Serialize;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde::Serialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde::Serialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `BTreeMap`, `BTreeSet`, `io::Write`, `path::PathBuf`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":258,"byte_end":266,"line_start":8,"line_end":8,"column_start":25,"column_end":33,"is_primary":true,"text":[{"text":"use std::{collections::{BTreeMap, BTreeSet},io::Write,path::PathBuf};","highlight_start":25,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":268,"byte_end":276,"line_start":8,"line_end":8,"column_start":35,"column_end":43,"is_primary":true,"text":[{"text":"use std::{collections::{BTreeMap, BTreeSet},io::Write,path::PathBuf};","highlight_start":35,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":278,"byte_end":287,"line_start":8,"line_end":8,"column_start":45,"column_end":54,"is_primary":true,"text":[{"text":"use std::{collections::{BTreeMap, BTreeSet},io::Write,path::PathBuf};","highlight_start":45,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":288,"byte_end":301,"line_start":8,"line_end":8,"column_start":55,"column_end":68,"is_primary":true,"text":[{"text":"use std::{collections::{BTreeMap, BTreeSet},io::Write,path::PathBuf};","highlight_start":55,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":234,"byte_end":303,"line_start":8,"line_end":8,"column_start":1,"column_end":70,"is_primary":true,"text":[{"text":"use std::{collections::{BTreeMap, BTreeSet},io::Write,path::PathBuf};","highlight_start":1,"highlight_end":70}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `BTreeMap`, `BTreeSet`, `io::Write`, `path::PathBuf`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:8:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::{collections::{BTreeMap, BTreeSet},io::Write,path::PathBuf};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2718,"byte_end":2719,"line_start":78,"line_end":78,"column_start":53,"column_end":54,"is_primary":true,"text":[{"text":"    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;","highlight_start":53,"highlight_end":54}],"label":"cannot use the `?` operator in a function that returns `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":2718,"byte_end":2719,"line_start":78,"line_end":78,"column_start":53,"column_end":54,"is_primary":false,"text":[{"text":"    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;","highlight_start":53,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":389,"byte_end":2912,"line_start":13,"line_end":85,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"fn main() {","highlight_start":1,"highlight_end":12},{"text":"    let args: Vec<String> = env::args().collect();","highlight_start":1,"highlight_end":51},{"text":"    let mut arguments = Vec::<String>::new();","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"\\n==================\");","highlight_start":1,"highlight_end":38},{"text":"    println!(\"|                |\");","highlight_start":1,"highlight_end":36},{"text":"    println!(\"|  Cryp Traderz  |\");","highlight_start":1,"highlight_end":36},{"text":"    println!(\"|                |\");","highlight_start":1,"highlight_end":36},{"text":"    println!(\"==================\\n\\n\");","highlight_start":1,"highlight_end":40},{"text":"    println!(\"USAGE:\");","highlight_start":1,"highlight_end":24},{"text":"    println!(\"\\t./cryptr <creds_path> SUBCOMMAND\\n\");","highlight_start":1,"highlight_end":54},{"text":"    println!(\"SUBCOMMANDS:\");","highlight_start":1,"highlight_end":30},{"text":"    println!(\"\\tbalance\");","highlight_start":1,"highlight_end":27},{"text":"    println!(\"\\tprices\");","highlight_start":1,"highlight_end":26},{"text":"    println!(\"\\tstat\");","highlight_start":1,"highlight_end":24},{"text":"    println!(\"\\tticker <coin>\");","highlight_start":1,"highlight_end":33},{"text":"    println!();","highlight_start":1,"highlight_end":16},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    let mut subcommand:String = \"\".to_string(); /* mutable strings are able to be updated later */","highlight_start":1,"highlight_end":99},{"text":"    let mut creds_path_input:String = \"creds.json\".to_string();","highlight_start":1,"highlight_end":64},{"text":"    let mut coin:String = \"BTCUSD\".to_string(); /* initialized coin to BTCUSD, bitcoin */","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    match args.len() { /* rust's version of a switch statement*/","highlight_start":1,"highlight_end":65},{"text":"        4 => { /* 3 arguments + default exec */","highlight_start":1,"highlight_end":48},{"text":"            coin = args[3].to_string();","highlight_start":1,"highlight_end":40},{"text":"            subcommand = args[2].to_string();","highlight_start":1,"highlight_end":46},{"text":"            creds_path_input = args[1].to_string();","highlight_start":1,"highlight_end":52},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        3 => { /* 2 arguments + default exec */","highlight_start":1,"highlight_end":48},{"text":"            subcommand = args[2].to_string();","highlight_start":1,"highlight_end":46},{"text":"            creds_path_input = args[1].to_string();","highlight_start":1,"highlight_end":52},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        _ => { /* Default case */","highlight_start":1,"highlight_end":34},{"text":"            println!(\"\\nIncorrect number of Arguments. [{}]\\n\", args.len());","highlight_start":1,"highlight_end":77},{"text":"            return;","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let creds_path = Path::new(&creds_path_input); ","highlight_start":1,"highlight_end":52},{"text":"    if !creds_path.is_file() {","highlight_start":1,"highlight_end":31},{"text":"        println!(\"File: {} does not exist\", creds_path_input);","highlight_start":1,"highlight_end":63},{"text":"        return;","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    println!(\"Found your path at: {}\", creds_path_input);","highlight_start":1,"highlight_end":58},{"text":"    let mut krc = krakenrs::KrakenRestConfig::default();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let credentials = match krakenrs::KrakenCredentials::load_json_file(creds_path) {","highlight_start":1,"highlight_end":86},{"text":"        Ok(res) => res,","highlight_start":1,"highlight_end":24},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            println!(\"error loading creds, {}\", e);","highlight_start":1,"highlight_end":52},{"text":"            return;","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    let pairs = Vec::from(\"BTCUSD\".to_string());","highlight_start":1,"highlight_end":49},{"text":"    krc.creds = credentials;","highlight_start":1,"highlight_end":29},{"text":"    let api = krakenrs::KrakenRestAPI::try_from(krc).expect(\"could not create kraken api\");","highlight_start":1,"highlight_end":92},{"text":"    let result = api.get_account_balance().expect(\"api call failed\");","highlight_start":1,"highlight_end":70},{"text":"    //let sorted_result = result.into_iter().collect::<BTreeMap<_, _>>();","highlight_start":1,"highlight_end":74},{"text":"    //println!(\"{:?}\", result);","highlight_start":1,"highlight_end":32},{"text":"    for x in result {","highlight_start":1,"highlight_end":22},{"text":"        println!(\"{:?}\", x);","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;","highlight_start":1,"highlight_end":66},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //fs::write(\"./wallet_balance.json\", sorted_result).expect(\"Unable to write file\");","highlight_start":1,"highlight_end":88},{"text":"    // fs::write(\"./out.json\", stdout.to_string()).expect(\"Unable to write file\");","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:78:53\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn main() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let args: Vec<String> = env::args().collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut arguments = Vec::<String>::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in a function that returns `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromResidual<Result<Infallible, std::io::Error>>` is not implemented for `()`\u001b[0m\n\n"}
{"message":"the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2729,"byte_end":2730,"line_start":78,"line_end":78,"column_start":64,"column_end":65,"is_primary":true,"text":[{"text":"    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;","highlight_start":64,"highlight_end":65}],"label":"cannot use the `?` operator in a function that returns `()`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":2729,"byte_end":2730,"line_start":78,"line_end":78,"column_start":64,"column_end":65,"is_primary":false,"text":[{"text":"    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;","highlight_start":64,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of operator `?`","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/main.rs","byte_start":389,"byte_end":2912,"line_start":13,"line_end":85,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"fn main() {","highlight_start":1,"highlight_end":12},{"text":"    let args: Vec<String> = env::args().collect();","highlight_start":1,"highlight_end":51},{"text":"    let mut arguments = Vec::<String>::new();","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"\\n==================\");","highlight_start":1,"highlight_end":38},{"text":"    println!(\"|                |\");","highlight_start":1,"highlight_end":36},{"text":"    println!(\"|  Cryp Traderz  |\");","highlight_start":1,"highlight_end":36},{"text":"    println!(\"|                |\");","highlight_start":1,"highlight_end":36},{"text":"    println!(\"==================\\n\\n\");","highlight_start":1,"highlight_end":40},{"text":"    println!(\"USAGE:\");","highlight_start":1,"highlight_end":24},{"text":"    println!(\"\\t./cryptr <creds_path> SUBCOMMAND\\n\");","highlight_start":1,"highlight_end":54},{"text":"    println!(\"SUBCOMMANDS:\");","highlight_start":1,"highlight_end":30},{"text":"    println!(\"\\tbalance\");","highlight_start":1,"highlight_end":27},{"text":"    println!(\"\\tprices\");","highlight_start":1,"highlight_end":26},{"text":"    println!(\"\\tstat\");","highlight_start":1,"highlight_end":24},{"text":"    println!(\"\\tticker <coin>\");","highlight_start":1,"highlight_end":33},{"text":"    println!();","highlight_start":1,"highlight_end":16},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    let mut subcommand:String = \"\".to_string(); /* mutable strings are able to be updated later */","highlight_start":1,"highlight_end":99},{"text":"    let mut creds_path_input:String = \"creds.json\".to_string();","highlight_start":1,"highlight_end":64},{"text":"    let mut coin:String = \"BTCUSD\".to_string(); /* initialized coin to BTCUSD, bitcoin */","highlight_start":1,"highlight_end":90},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    match args.len() { /* rust's version of a switch statement*/","highlight_start":1,"highlight_end":65},{"text":"        4 => { /* 3 arguments + default exec */","highlight_start":1,"highlight_end":48},{"text":"            coin = args[3].to_string();","highlight_start":1,"highlight_end":40},{"text":"            subcommand = args[2].to_string();","highlight_start":1,"highlight_end":46},{"text":"            creds_path_input = args[1].to_string();","highlight_start":1,"highlight_end":52},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        3 => { /* 2 arguments + default exec */","highlight_start":1,"highlight_end":48},{"text":"            subcommand = args[2].to_string();","highlight_start":1,"highlight_end":46},{"text":"            creds_path_input = args[1].to_string();","highlight_start":1,"highlight_end":52},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        _ => { /* Default case */","highlight_start":1,"highlight_end":34},{"text":"            println!(\"\\nIncorrect number of Arguments. [{}]\\n\", args.len());","highlight_start":1,"highlight_end":77},{"text":"            return;","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let creds_path = Path::new(&creds_path_input); ","highlight_start":1,"highlight_end":52},{"text":"    if !creds_path.is_file() {","highlight_start":1,"highlight_end":31},{"text":"        println!(\"File: {} does not exist\", creds_path_input);","highlight_start":1,"highlight_end":63},{"text":"        return;","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    println!(\"Found your path at: {}\", creds_path_input);","highlight_start":1,"highlight_end":58},{"text":"    let mut krc = krakenrs::KrakenRestConfig::default();","highlight_start":1,"highlight_end":57},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let credentials = match krakenrs::KrakenCredentials::load_json_file(creds_path) {","highlight_start":1,"highlight_end":86},{"text":"        Ok(res) => res,","highlight_start":1,"highlight_end":24},{"text":"        Err(e) => {","highlight_start":1,"highlight_end":20},{"text":"            println!(\"error loading creds, {}\", e);","highlight_start":1,"highlight_end":52},{"text":"            return;","highlight_start":1,"highlight_end":20},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    let pairs = Vec::from(\"BTCUSD\".to_string());","highlight_start":1,"highlight_end":49},{"text":"    krc.creds = credentials;","highlight_start":1,"highlight_end":29},{"text":"    let api = krakenrs::KrakenRestAPI::try_from(krc).expect(\"could not create kraken api\");","highlight_start":1,"highlight_end":92},{"text":"    let result = api.get_account_balance().expect(\"api call failed\");","highlight_start":1,"highlight_end":70},{"text":"    //let sorted_result = result.into_iter().collect::<BTreeMap<_, _>>();","highlight_start":1,"highlight_end":74},{"text":"    //println!(\"{:?}\", result);","highlight_start":1,"highlight_end":32},{"text":"    for x in result {","highlight_start":1,"highlight_end":22},{"text":"        println!(\"{:?}\", x);","highlight_start":1,"highlight_end":29},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;","highlight_start":1,"highlight_end":66},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //fs::write(\"./wallet_balance.json\", sorted_result).expect(\"Unable to write file\");","highlight_start":1,"highlight_end":88},{"text":"    // fs::write(\"./out.json\", stdout.to_string()).expect(\"Unable to write file\");","highlight_start":1,"highlight_end":83},{"text":"","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"this function should return `Result` or `Option` to accept `?`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `FromResidual<_>` is not implemented for `()`","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `FromResidual`)\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:78:64\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn main() {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let args: Vec<String> = env::args().collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut arguments = Vec::<String>::new();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    serde_json::to_writer(&File::create(\"data.json\")?, &result)?;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcannot use the `?` operator in a function that returns `()`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mthis function should return `Result` or `Option` to accept `?`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `FromResidual<_>` is not implemented for `()`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 6 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 6 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0277, E0463.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0463.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
